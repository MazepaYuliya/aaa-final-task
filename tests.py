"""–ú–æ–¥—É–ª—å —Ç–µ—Å—Ç–æ–≤"""
import re
import textwrap
from typing import Callable

import pytest
from click.testing import CliRunner
from constants import PIZZA_TYPES
from cli import bake, deliver, menu, order, pickup
from pizza_types import Margherita, Pepperoni, Pizza


@pytest.mark.parametrize(
    'method, check_log, expected_text',
    [
        (
            bake,
            False,
            """
            –ì–æ—Ç–æ–≤–∏–º –¥–ª—è –í–∞—Å –ø–∏—Ü—Ü—É Pepperoni (XL)...
            –í–∞—à–∞ –ø–∏—Ü—Ü–∞ –≥–æ—Ç–æ–≤–∞!
            """
        ),
        (
            pickup,
            False,
            """
            –û–∂–∏–¥–∞–µ–º, –ø–æ–∫–∞ –í—ã –∑–∞–±–µ—Ä–µ—Ç–µ –ø–∏—Ü—Ü—É Pepperoni (XL)...
            –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!
            """
        ),
        (
            deliver,
            False,
            """
            –ö—É—Ä—å–µ—Ä —É–∂–µ –≤ –ø—É—Ç–∏. –í–µ–∑–µ—Ç –ø–∏—Ü—Ü—É Pepperoni (XL)...
            –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!
            """
        ),
        (
            bake,
            True,
            """
            –ì–æ—Ç–æ–≤–∏–º –¥–ª—è –í–∞—Å –ø–∏—Ü—Ü—É Pepperoni (XL)...
            –í–∞—à–∞ –ø–∏—Ü—Ü–∞ –≥–æ—Ç–æ–≤–∞!
            bake - –∑–∞ XX —Å!
            """
        ),
        (
            pickup,
            True,
            """
            –û–∂–∏–¥–∞–µ–º, –ø–æ–∫–∞ –í—ã –∑–∞–±–µ—Ä–µ—Ç–µ –ø–∏—Ü—Ü—É Pepperoni (XL)...
            –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!
            üè† –ó–∞–±—Ä–∞–ª–∏ –∑–∞ XX —Å!
            """
        ),
        (
            deliver,
            True,
            """
            –ö—É—Ä—å–µ—Ä —É–∂–µ –≤ –ø—É—Ç–∏. –í–µ–∑–µ—Ç –ø–∏—Ü—Ü—É Pepperoni (XL)...
            –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!
            üõµ –î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ XX —Å!
            """
        ),
    ]
)
def test_bake_and_deliver(
    capsys,
    method: Callable,
    check_log: bool,
    expected_text: str
) -> None:
    """–¢–µ—Å—Ç –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ bake, deliver –∏ pickup —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ –±–µ–∑"""
    pizza = Pepperoni('XL')
    has_decorator = hasattr(method, '__wrapped__')
    if not check_log and has_decorator:
        method = method.__wrapped__  # type: ignore
    method(pizza)
    captured = capsys.readouterr()
    output = captured.out.strip()
    replaced_output = re.sub(r'–∑–∞ \d{1,2} —Å!', '–∑–∞ XX —Å!', output)
    expected_output = textwrap.dedent(expected_text).strip()
    assert replaced_output == expected_output


@pytest.mark.parametrize(
    'pizza_type, size, delivery, expected_text',
    [
        (
            'Pepperoni',
            'XL',
            False,
            '–û–∂–∏–¥–∞–µ–º, –ø–æ–∫–∞ –í—ã –∑–∞–±–µ—Ä–µ—Ç–µ –ø–∏—Ü—Ü—É Pepperoni (XL)'
        ),
        (
            'Pepperoni',
            '',
            True,
            '–ö—É—Ä—å–µ—Ä —É–∂–µ –≤ –ø—É—Ç–∏. –í–µ–∑–µ—Ç –ø–∏—Ü—Ü—É Pepperoni (L)'
        ),
        ('Cheese', 'L', True, '–¢–∞–∫–æ–π –ø–∏—Ü—Ü—ã –Ω–µ—Ç –≤ –º–µ–Ω—é'),
        ('Pepperoni', 'S', True, '–£ –Ω–∞—Å –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã'),
    ]
)
def test_order(
    pizza_type: str,
    size: str,
    delivery: bool,
    expected_text: str
) -> None:
    """–¢–µ—Å—Ç –¥–ª—è –º–µ—Ç–æ–¥–∞ order —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    runner = CliRunner()
    params = [pizza_type]
    if delivery:
        params.append('--delivery')
    if size:
        params.extend(['--size', size])
    result = runner.invoke(order, params)
    assert result.exit_code == 0
    assert expected_text in result.output


def test_menu() -> None:
    """–¢–µ—Å—Ç –¥–ª—è –º–µ—Ç–æ–¥–∞ order —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    runner = CliRunner()
    result = runner.invoke(menu, [])
    assert result.exit_code == 0
    assert '–ú–ï–ù–Æ' in result.output
    for pizza_type in PIZZA_TYPES:
        assert pizza_type in result.output


@pytest.mark.parametrize(
    'first_pizza, second_pizza, result',
    [
        (Pepperoni('XL'), Pepperoni('L'), False),
        (Margherita('XL'), Pepperoni('L'), False),
        (Pepperoni('XL'), Pepperoni('XL'), True),
        (Pepperoni('XL'), 'string', False),
    ]
)
def test_pizza_equality(first_pizza, second_pizza, result):
    """–¢–µ—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∏—Ü—Ü"""
    assert (first_pizza == second_pizza) == result


def test_wrong_pizza_size():
    """–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∏—Ü—Ü—ã –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
    with pytest.raises(ValueError):
        Pepperoni('S')


def test_wrong_pizza_recipe():
    """–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤"""
    with pytest.raises(ValueError):
        Pizza('XL').dict()
